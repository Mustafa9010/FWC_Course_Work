proot-distro login ubuntu

cd /data/data/com.termux/files/home/fpga

apt update 
apt upgrade

#Install ssh-server
sudo apt install openssh-server sshpass

# Install arm toolchain and hardware tools
sudo apt install build-essential libssl-dev libffi-dev python3-dev bison flex git tcl-dev tcl tcl-tclreadline libreadline-dev  autoconf libtool make automake texinfo pkg-config libusb-1.0-0 libusb-1.0-0-dev gcc-arm-none-eabi libnewlib-arm-none-eabi telnet python3 apt-utils libxslt-dev python3-lxml python3-simplejson cmake curl  python3-setuptools python3-pip


#Pull all necessary tools
cd  /home/fpga
#Need to check if pygmy-sdk can be reduced by keeping only the basic hardware
#components.
git clone --recursive https://github.com/optimuslogic/pygmy-dev


#Create directory for building the toolchain
mkdir -p /home/fpga/symbiflow
export  INSTALL_DIR=/home/fpga/symbiflow

#Download and extract symbiflow
https://iith-my.sharepoint.com/:u:/g/personal/gadepall_ee_iith_ac_in/Ebot5QHEYXBAo-7n4hnvJu0B8vMrTIdj_COHJC2cmDY1ww?e=bqDxHI

cp arch.tar.gz /home/fpga/arch.tar.gz

tar -C $INSTALL_DIR  -xvf /home/fpga/arch.tar.gz

export PATH="$INSTALL_DIR/quicklogic-arch-defs/bin:$INSTALL_DIR/quicklogic-arch-defs/bin/python3:$PATH"

#Install fasm 
cd /home/fpga/pygmy-dev/tools/quicklogic-fasm
nvim requirements.txt
#modify the lines so that they look like
-e git+https://github.com/symbiflow/fasm.git#egg=fasm
-e git+https://github.com/antmicro/quicklogic-fasm-utils.git#egg=fasm-utils

sudo pip3 install -r requirements.txt
sudo python3 setup.py install
cd /home/fpga

#Install yosys
cd /home/fpga/pygmy-dev/tools/quicklogic-yosys
make config-gcc
make -j4 install PREFIX=$INSTALL_DIR
cd /home/fpga

#install yosys-symbiflow
cd /home/fpga/pygmy-dev/tools/yosys-symbiflow-plugins
export PATH=$INSTALL_DIR/bin:$PATH
make -j4 install
cd /home/fpga

#install vtr
cd /home/fpga/pygmy-dev/tools/vtr-verilog-to-routing
make -j4
cd /home/fpga

cp /home/fpga/pygmy-dev/tools/vtr-verilog-to-routing/build/vpr/vpr $INSTALL_DIR/bin
cp /home/fpga/pygmy-dev/tools/vtr-verilog-to-routing/build/utils/fasm/genfasm $INSTALL_DIR/bin

#add path to .bashrc
nvim ~/.bashrc
#paste the following 3 lines at the end of the file
export  INSTALL_DIR=/home/fpga/symbiflow
export PATH="$INSTALL_DIR/quicklogic-arch-defs/bin:$INSTALL_DIR/quicklogic-arch-defs/bin/python3:$PATH"
export PATH=/home/fpga/symbiflow/bin:$PATH
#Ctrl+X save and exit.  reboot for the settings to be updated.
#reboot
#After login
cd /home/fpga

#Check the executables on Path
vpr -h
yosys -h
qlfasm -h
ql_symbiflow -h

#Test installation
cd $INSTALL_DIR/quicklogic-arch-defs/tests/counter_16bit
ql_symbiflow -compile -d ql-eos-s3 -P pd64 -v counter_16bit.v -t top -p chandalar.pcf -dump binary
#top.bin must be generated successfully 

#Blink program
cd /home/fpga
mkdir fpga-examples
cd fpga-examples
svn co https://github.com/gadepall/vaman/trunk/fpga/setup/codes/blink

ql_symbiflow -compile -src /home/fpga/fpga-examples/blink -d ql-eos-s3 -P PU64 -v helloworldfpga.v -t helloworldfpga -p quickfeather.pcf -dump binary
#helloworldfpga.bin must be generated successfully in /home/fpga/fpga-examples/blink

#Transfer .bin file to RPI
scp /home/fpga/fpga-examples/blink/helloworldfpga.bin pi@192.168.0.114:
#Suitably modify the above ip address

#On RPi
git clone --recursive https://github.com/QuickLogic-Corp/TinyFPGA-Programmer-Application.git
sudo pip3 install tinyfpgab pyserial
sudo reboot


# Then execute the following 
python3 /home/pi/TinyFPGA-Programmer-Application/tinyfpga-programmer-gui.py --port /dev/ttyACM0 --appfpga /home/pi/helloworldfpga.bin --mode fpga

#End FPGA hello world


/*Program for blinking LED
January 16,2021
Code by G V V Sharma
Released under GNU GPL
*/

//declaring the blink module
module helloworldfpga(
        input ledstate,
    output wire redled,
    output wire greenled,
    output wire blueled
);
//    wire clk;

  //  qlal4s3b_cell_macro u_qlal4s3b_cell_macro (
    //    .Sys_Clk0 (clk),
   // );

  //  reg[26:0] delay;
    // reg      led;
//always@(posedge clk) begin
//delay = delay+1; //incrementing the counter.
//counts from 0 to 20000000 in 1 second

//if(delay==27'b1001100010010110100000000) // blink delay in bits
//if(delay > 20000000) //blink delay in decimal
//begin
//delay=27'b0;
//led=!led; //reset the led
//end
//end
    assign blueled = ledstate;  //If you want to change led colour to blue, 
assign redled = ledstate; //If you want to change led colour to red, 
assign greenled=ledstate;
endmodule
//end of the module
